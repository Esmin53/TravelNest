datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  description   String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  property      Property[]
  reviews       Review[]
  
  bookingsAsHost      Booking[] @relation("HostRelation")
  bookingsAsGuest  Booking[] @relation("GuestRelation")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum propertyTypes {
  hotel
  motel
  house
  appartment
  cabin
  campsite
  other
}

enum landscapeTypes {
  city
  country
  mountains
  beach
  forrest
  desert
  snowy
  camping
  tropical
  island
}

model Property {
  id                String    @id @default(cuid())
  images            String[]
  country           String
  city              String
  location          String
  bedrooms          Int
  bathrooms         Int
  rooms             Int
  price             Int
  propertyType      propertyTypes
  landscapeType     landscapeTypes
  name              String
  pets              Boolean
  airConditioning   Boolean
  kitchen           Boolean
  washingMachine    Boolean
  freeWiFi          Boolean
  noSmoking         Boolean
  heating           Boolean
  avgRating         Float     @default(0)
  numReviews        Int       @default(0)

  hostId            String
  user              User     @relation(fields: [hostId], references: [id])

  bookings          Booking[]
  reviews           Review[]

}

enum BookingStatus {
  PENDING
  IN_PROCESS
  COMPLETED
}

model Booking {
  id                String    @id @default(cuid())
  checkInDate       DateTime
  checkOutDate      DateTime
  nights            Int
  price             Int 
  status            BookingStatus
  propertyName      String
  location          String

  propertyId        String
  property          Property @relation(fields: [propertyId], references: [id])   

  hostId            String
  host              User     @relation(name: "HostRelation", fields: [hostId], references: [id])

  guestId        String
  guest          User     @relation(name: "GuestRelation", fields: [guestId], references: [id])
}

model Review {
    id          String    @id @default(cuid())
    rating      Int
    review      String
    stayedFor   String
    
    guestId        String
    guest          User     @relation(fields: [guestId], references: [id])

    propertyId        String
    property          Property @relation(fields: [propertyId], references: [id])   

  createdAt DateTime  @default(now())
}